Q2. Increasing Triplet Subsequence
Link: https://leetcode.com/problems/increasing-triplet-subsequence/description/

Solution :

      APPROACH 1: 
      
      class Solution {
      public:
          bool increasingTriplet(vector<int>& nums) {
              int n = nums.size();
              int left[n], right[n];

              if(n < 3)
                 return false;

              left[0] = nums[0];
              for(int i=1;i<n;i++){
                  left[i] = min(left[i-1],nums[i]);
              }

              right[n-1] = nums[n-1];
              for(int i=n-2;i>=0;i--){
                  right[i] = max(right[i+1],nums[i]);
              }

              for(int i=1;i<n-1;i++){
                  if(left[i-1]<nums[i] && nums[i]<right[i+1])
                     return true;
              }

              return false;
          }
      };
 
 ------------------------------------------------------------------------------------------------
      APPROACH 2:
      
      class Solution {
      public:
          bool increasingTriplet(vector<int>& nums) {
              int n = nums.size();
              if(n < 3)
                 return false;
              int mini1 = INT_MAX, mini2 = INT_MAX;

              for(int i=0;i<n;i++){
                  if(nums[i] <= mini1){
                      mini1 = nums[i];
                  }else if(nums[i] <= mini2){
                      mini2 = nums[i];
                  }else{
                      return true;
                  }
              }
              return false;
          }
      };
      
   ------------------------------------------------------------------------------------------------
