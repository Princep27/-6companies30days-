Q8. Profitable Path in a Tree.
Link : https://leetcode.com/problems/most-profitable-path-in-a-tree/

Solution :

        class Solution {
        public:

            void findPar(vector<int> adj[],int n,vector<int> &par){
                vector<int> vis(n,0);
                queue<int> q;
                q.push(0);
                while(!q.empty()){
                    int n = q.size();
                    for(int i=0;i<n;i++){
                        int temp = q.front();
                        q.pop();

                        for(auto it:adj[temp]){
                            if(!vis[it]){
                                par[it] = temp;
                                q.push(it);
                                vis[it] = 1;
                            }
                        }
                    }
                }
            }

            int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
                int n = amount.size();
                vector<int> adj[n];
                vector<int> par(n,0);

                for(int i=0;i<edges.size();i++){
                    par[edges[i][1]] = edges[i][0];

                    adj[edges[i][0]].push_back(edges[i][1]);
                    adj[edges[i][1]].push_back(edges[i][0]);
                }

                findPar(adj,n,par);

                queue<int> q1;
                int ans = INT_MIN;
                q1.push(0);

                vector<int> dis(n,0);
                vector<int> vis(n,0);
                vector<int> curVis(n,0);
                dis[0] = amount[0];
                amount[bob] = 0;
                vis[0] = 1;
                curVis[0] = 1;

                while(!q1.empty()){
                    int s1 = q1.size();
                    for(int i=0;i<s1;i++){

                        int a = q1.front();
                        q1.pop();

                        int leaf = 0;
                        for(auto it:adj[a]){
                            if(!vis[it]){
                                leaf++;
                                dis[it] = dis[a] + amount[it];
                                q1.push(it);
                                vis[it] = 1;
                                curVis[it] = 1;
                            }
                        }

                        curVis[a] = 0;
                        if(leaf == 0)
                            ans = max(ans,dis[a]);
                    }

                    if(bob){
                        bob = par[bob];
                        if(curVis[bob] == 1){
                            dis[bob] = dis[bob] - amount[bob]/2;
                            bob = 0;
                        }else{
                            amount[bob] = 0;
                        }
                    }
                }

                return ans;
            }
        };
