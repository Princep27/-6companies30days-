Q4. Number of Boomerangs
Link: https://leetcode.com/problems/number-of-boomerangs/submissions/872788536/

Solution: 

      //TIME COMPLEXITY O(n^2)

      class Solution {
      public:
          int numberOfBoomerangs(vector<vector<int>>& points) {
              int n =points.size();
              int ans = 0;

              for(int i=0;i<n;++i){
                  unordered_map<long long,int> mp;
                  for(int j=0;j<n;++j){
                      long long dist = (points[j][0] - points[i][0])*(points[j][0] - points[i][0]) +      
                                       (points[j][1] - points[i][1])*(points[j][1] - points[i][1]);
                      ++mp[dist];
                  }

                  for(auto it: mp){
                      if(it.second >= 2){
                          ans += it.second*(it.second-1);
                      }
                  }
              }

              return ans;
          }
      };
      
